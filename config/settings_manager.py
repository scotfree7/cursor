"""
Settings manager to handle both global and user-specific settings.
This module provides a unified interface to access all settings.
"""

import os
from pathlib import Path
from typing import Any, Dict, Optional
import json

from config.settings import *

# Try to import user settings, use defaults if not found
try:
    from config.user_settings import *
except ImportError:
    print("No user settings found. Using defaults.")
    USER_TRADING_PREFERENCES = {}
    USER_RISK_SETTINGS = {}
    USER_WATCHLISTS = {}
    USER_ALERTS = {}
    DISPLAY_SETTINGS = {}

class SettingsManager:
    _instance = None
    
    def __new__(cls):
        if cls._instance is None:
            cls._instance = super().__new__(cls)
            cls._instance._initialize()
        return cls._instance
    
    def _initialize(self):
        """Initialize settings with both global and user preferences."""
        self.settings = {
            'trading': {**TRADING_SETTINGS, **USER_TRADING_PREFERENCES},
            'risk': {**RISK_MANAGEMENT, **USER_RISK_SETTINGS},
            'technical': TECHNICAL_ANALYSIS,
            'data_sources': DATA_SOURCES,
            'notifications': {**NOTIFICATIONS, **USER_ALERTS},
            'logging': LOGGING,
            'strategy': STRATEGY_PARAMS,
            'watchlist': {
                'default': DEFAULT_WATCHLIST,
                'user': USER_WATCHLISTS
            },
            'scanner': SCANNER_SETTINGS,
            'display': DISPLAY_SETTINGS
        }
        
        # Create data directory if it doesn't exist
        os.makedirs(DATA_DIR, exist_ok=True)
    
    def get(self, category: str, key: str, default: Any = None) -> Any:
        """
        Get a setting value.
        
        Args:
            category: The settings category
            key: The specific setting key
            default: Default value if not found
            
        Returns:
            The setting value or default if not found
        """
        return self.settings.get(category, {}).get(key, default)
    
    def update(self, category: str, key: str, value: Any) -> None:
        """
        Update a setting value.
        
        Args:
            category: The settings category
            key: The specific setting key
            value: The new value
        """
        if category in self.settings:
            self.settings[category][key] = value
    
    def save_user_preferences(self) -> None:
        """Save current user preferences to file."""
        user_settings = {
            'trading': self.settings['trading'],
            'risk': self.settings['risk'],
            'notifications': self.settings['notifications'],
            'watchlist': self.settings['watchlist']['user'],
            'display': self.settings['display']
        }
        
        settings_path = CONFIG_DIR / 'user_settings.py'
        with open(settings_path, 'w') as f:
            f.write('"""User settings generated by SettingsManager"""\n\n')
            for key, value in user_settings.items():
                f.write(f'{key.upper()}_SETTINGS = {json.dumps(value, indent=4)}\n\n')
    
    def load_user_preferences(self) -> None:
        """Reload user preferences from file."""
        try:
            from importlib import reload
            import config.user_settings as user_settings
            reload(user_settings)
            self._initialize()
        except ImportError:
            print("No user settings file found. Using defaults.")
    
    def export_settings(self, filepath: str) -> None:
        """
        Export current settings to a JSON file.
        
        Args:
            filepath: Path to save the settings
        """
        with open(filepath, 'w') as f:
            json.dump(self.settings, f, indent=4)
    
    def import_settings(self, filepath: str) -> None:
        """
        Import settings from a JSON file.
        
        Args:
            filepath: Path to the settings file
        """
        with open(filepath, 'r') as f:
            imported_settings = json.load(f)
            self.settings.update(imported_settings)

# Global settings manager instance
settings = SettingsManager() 